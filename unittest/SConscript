Import('env')

env['GTEST_DIR'] = '${IOTIVITY_BASE}/extlibs/gtest/googletest-release-1.7.0'
env_unittest = env.Clone()

if env['TARGET_OS'] == 'windows':
  unittest_cpp = ['name_test.cpp',
                  'unit_test.cpp',
                  'windows_main.cpp',
                  '${GTEST_DIR}/msvc_2015/x64/Release/gtest.lib']
  
elif env['TARGET_OS'] == 'linux':
  env_unittest.VariantDir('samples', '../samples')
  env_unittest.VariantDir('src', '../src')
  common_cpp = ['samples/log.cpp',
                'src/device_information.cpp',
                'src/device_resource.cpp',
                'src/han_client.cpp',
                'src/hash.cpp',
                'src/resource.cpp',
                'src/secure_mode_resource.cpp',
                'src/transport.cpp',
                'src/virtual_resource.cpp']
  unittest_cpp = [
#                  'device_information_test.cpp',
#                  'hanfun_server_test.cpp',
#                  'introspection_test.cpp',
                  'name_test.cpp',
#                  'ocf_resource_test.cpp',
#                  'secure_mode_resource_test.cpp',
                  'unit_test.cpp',
                  '${GTEST_DIR}/lib/.libs/libgtest.a',
                  '${GTEST_DIR}/lib/.libs/libgtest_main.a']
  
  if env.get('INTEGRATION_TESTS') == True:
    unittest_cpp.append('han_client_test.cpp')

env_unittest.AppendUnique(CPPPATH = ['${GTEST_DIR}/include',
                                     '${IOTIVITY_BASE}/resource/c_common/oic_time/include',
                                     '#/src'])
                                     
env_unittest.AppendUnique(LIBS = [
  'c_common',
  'crypto',
  'hanfun',
  'octbstack',
  'uv'
  ])
  
if env_unittest['SECURED'] == '1':
  env_unittest.AppendUnique(LIBS = ['ocpmapi'])
  
unittest_bins = [env_unittest.Program('HanFunBridgeTest', [unittest_cpp, common_cpp]),
                 env_unittest.Program('VirtualResourceTest', ['virtual_resource_test.cpp', common_cpp])]
env.Install('#/${BUILD_DIR}/bin', unittest_bins)
 
